from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext, PollAnswerHandler
import logging
from datetime import datetime, time
import locale

# Habilitar los logs para depuraci√≥n
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# Token del bot de Telegram
TOKEN = '7492611615:AAEumvRy9MM6peU7p1LABSKecbvAtJ4XNvE'

# Tu chat ID de Telegram (para recibir mensajes privados)
TU_CHAT_ID = 99999999

# Configurar la localizaci√≥n a espa√±ol
locale.setlocale(locale.LC_TIME, 'spanish')

# Mensaje est√°ndar de las encuestas
TXT = "RESPONDER ANTES DE LAS 18H, M√çNIMO 8 PERSONAS PARA ENTRENAR"

# Diccionario para almacenar respuestas a encuestas
respuestas_encuesta = {}

# Variable global para almacenar el chat_id del grupo
group_chat_id = None

# Funci√≥n para iniciar el bot y guardar el chat_id del grupo
async def start(update: Update, context: CallbackContext) -> None:
    global group_chat_id
    group_chat_id = update.message.chat_id  # Guardar el chat_id del grupo
    await update.message.reply_text("Bot iniciado. ¬°Hola! Soy el bot de WTCBEV. Estoy configurado para enviar encuestas los lunes y mi√©rcoles a las 8 AM para los entrenamientos de la semana. Si por alg√∫n casual estas encuestas no se env√≠an, puedes usar los comandos /MON y /WEN para enviarlas manualmente. ,
                                    Para enviar las encuestas de los partidos simplemente tienes que poner /JORN_("A" o "B")_("n¬∫ de la jornada"). Esta versi√≥n del bot (1.1.0) solamente est√°n las jornadas hasta la 22 (no aparecen m√°s en Swish). IMPORTANTE, USAD SOLAMENTE UNA VEZ CADA COMANDO PARA EVITAR CONFUSIONES. ¬°UN, DOS, TRES, ENRIQUE! üèÄ")

# Funci√≥n para enviar la encuesta del lunes
async def enviar_MON(update: Update, context: CallbackContext) -> None:
    chat_id = group_chat_id if group_chat_id else TU_CHAT_ID
    fecha_actual = datetime.now()
    dia = fecha_actual.day
    mes = fecha_actual.strftime("%B").upper()
    mensaje = f"Entrenamiento LUNES {dia} de {mes} a las 21 horas. FUERA"
    opciones = ["S√≠", "No","Entrenador"]
    encuesta_texto = f"{mensaje}\n\n{TXT}"
    await context.bot.send_poll(chat_id=chat_id, question=encuesta_texto, options=opciones, is_anonymous=False)

# Funci√≥n para enviar la encuesta del mi√©rcoles
async def enviar_WEN(update: Update, context: CallbackContext) -> None:
    chat_id = group_chat_id if group_chat_id else TU_CHAT_ID
    fecha_actual = datetime.now()
    dia = fecha_actual.day
    mes = fecha_actual.strftime("%B").upper()
    mensaje = f"Entrenamiento MI√âRCOLES {dia} de {mes} a las 21 horas. PABELL√ìN"
    opciones = ["S√≠", "No", "Entrenador"]
    encuesta_texto = f"{mensaje}\n\n{TXT}"
    await context.bot.send_poll(chat_id=chat_id, question=encuesta_texto, options=opciones, is_anonymous=False)

# Funci√≥n para manejar respuestas a encuestas
async def recibir_respuesta(update: Update, context: CallbackContext) -> None:
    respuesta = update.poll_answer
    usuario_id = respuesta.user.id
    usuario_nombre = respuesta.user.first_name
    opcion_elegida = respuesta.option_ids[0]  # Obtener la primera opci√≥n seleccionada
    opciones = ["S√≠", "No", "Disponible", "Entrenador"]
    respuesta_texto = opciones[opcion_elegida]
    
    # Enviar la respuesta al usuario due√±o del bot (admin)
    await context.bot.send_message(chat_id=TU_CHAT_ID, text=f"{usuario_nombre} respondi√≥: {respuesta_texto}")

# Funci√≥n para verificar respuestas a las 18:00
async def verificar_respuestas(context: CallbackContext) -> None:
    if respuestas_encuesta:
        total_si = sum(respuestas["s√≠"] for respuestas in respuestas_encuesta.values())
        mensaje = "Hay m√°s de 8 personas para entrenar hoy" if total_si >= 8 else "Hay menos de 8 personas para entrenar"
        await context.bot.send_message(chat_id=TU_CHAT_ID, text=mensaje)
    else:
        await context.bot.send_message(chat_id=TU_CHAT_ID, text="No hay respuestas registradas para hoy.")


# Configurar el bot y el programador
def main() -> None:
    application = Application.builder().token(TOKEN).build()
    
    # Comandos
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("MON", enviar_MON))
    application.add_handler(CommandHandler("WEN", enviar_WEN))
    
    
    # Manejar respuestas de encuestas
    application.add_handler(PollAnswerHandler(recibir_respuesta))
    
    # Programar el env√≠o de encuestas los lunes y mi√©rcoles a las 8 AM
    job_queue = application.job_queue
    job_queue.run_daily(enviar_MON, time=time(hour=8, minute=0), days=(0,))  # Lunes
    job_queue.run_daily(enviar_WEN, time=time(hour=8, minute=0), days=(2,))  # Mi√©rcoles
    job_queue.run_daily(verificar_respuestas, time=time(hour=18, minute=0))  # Verificar respuestas a las 18:00
    
    # Iniciar el bot
    application.run_polling()

if __name__ == '__main__':
    main()
